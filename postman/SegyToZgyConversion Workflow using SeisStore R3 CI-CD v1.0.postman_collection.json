{
	"info": {
		"_postman_id": "0c5b6d09-3f4f-45ec-8920-8be95df904fa",
		"name": "SegyToZgyConversion Workflow using SeisStore R3 CI-CD v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14168360"
	},
	"item": [
		{
			"name": "1 Get or Refresh Access Token",
			"item": [
				{
					"name": "1 Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// this snippet extracts the new access and id tokens and puts them to environment variables",
									"cp = pm.environment.get(\"cloud_platform\");",
									"var data = JSON.parse(responseBody)",
									"pm.environment.set(\"access_token\", data.access_token);",
									"pm.environment.set(\"id_token\", data.id_token);",
									"if (cp == \"GCP\") {",
									"   pm.collectionVariables.set(\"use_token\", data.id_token);",
									"}",
									"else {",
									"   pm.collectionVariables.set(\"use_token\", data.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var cp = pm.environment.get(\"cloud_platform\");\r",
									"if (cp === undefined){\r",
									"    cp = pm.globals.get(\"cloud_platform\");\r",
									"}\r",
									"\r",
									"if (cp === \"anthos\"){\r",
									"    // Delete refresh_token field from the body of the request\r",
									"    var refresh_token = pm.request.body.urlencoded.find( elem => \r",
									"        elem.key === \"refresh_token\"\r",
									"    );\r",
									"    refresh_token.disabled = true;\r",
									"\r",
									"    // Change grant_type field in the body of the request\r",
									"    var request_grant_type = pm.request.body.urlencoded.find(elem =>\r",
									"        elem.key === \"grant_type\"\r",
									"    );\r",
									"    request_grant_type.value = \"client_credentials\";\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Ocp-Apim-Subscription-Key",
								"type": "text",
								"value": "xxxxxxxx",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"description": "Supply your client id as an environment variable",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"description": "Supply your client secret as an environment variable",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{Scope}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2 Legal Tag Creation",
			"item": [
				{
					"name": "2.1 Create Legal Tag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"LegalTagName\", \"openZgy-Legal-Tag-\" + _.random(1, 9999999));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response",
									"var data = JSON.parse(responseBody)",
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"pm.environment.set(\"LegalTagName\", data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{LegalTagName}}\",\n    \"description\": \"Legal Tag added for Well\",\n    \"properties\": {\n        \"contractId\": \"123456\",\n        \"countryOfOrigin\": [\n            \"US\",\n            \"CA\"\n        ],\n        \"dataType\": \"Third Party Data\",\n        \"exportClassification\": \"EAR99\",\n        \"originator\": \"Schlumberger\",\n        \"personalData\": \"No Personal Data\",\n        \"securityClassification\": \"Private\",\n        \"expirationDate\": \"2025-12-25\"\n    }\n}"
						},
						"url": {
							"raw": "https://{{LEGAL_HOST}}/legaltags",
							"protocol": "https",
							"host": [
								"{{LEGAL_HOST}}"
							],
							"path": [
								"legaltags"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Retrieve the created legal tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK.\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate only retrieve one record",
									"/*responseJson = JSON.parse(responseBody);",
									"var list = responseBody.length;",
									"tests[\"Retrieve only one record\"] = list == 1;",
									"console.log(list);*/",
									"",
									"// Ensure the API returned content, and make sure the tag returned matches the tag created in the previous API call that created the tag",
									"pm.test(\"Proper legal tag returned? : \"+pm.variables.get(\"tagName\"), function () {",
									"    var jsonData = pm.response.json();",
									"    var legalTagName = pm.variables.get(\"LegalTagName\");",
									"    pm.expect(jsonData.name).to.equal(legalTagName);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{LEGAL_HOST}}/legaltags/{{LegalTagName}}",
							"protocol": "https",
							"host": [
								"{{LEGAL_HOST}}"
							],
							"path": [
								"legaltags",
								"{{LegalTagName}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3 File Collection",
			"item": [
				{
					"name": "3.1 Store File Collection With SD Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"file-collection-id\", data.recordIds[0]);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = _.random(999111111111, 999999999999);\r",
									"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
									"var record = pm.environment.get(\"record_mid\");\r",
									"//postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
									"pm.environment.set(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
									"\r",
									"var randomId1 = _.random(1,1000000);\r",
									"var randomId2 = _.random(1,1000000);\r",
									"pm.environment.set(\"randomId\", randomId1 + \"-\" + randomId2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n{\n  \"id\": \"{{data-partition-id}}:dataset--FileCollection.SEGY:{{randomId}}\",\n  \"kind\": \"{{authority}}:{{schemaSource}}:dataset--FileCollection.SEGY:1.0.0\",\n \n  \"acl\": {\n    \"owners\": [\n      \"data.default.owners@{{data-partition-id}}{{domain}}\"\n    ],\n    \"viewers\": [\n      \"data.default.viewers@{{data-partition-id}}{{domain}}\"\n    ]\n  },\n  \"legal\": {\n    \"legaltags\": [\n      \"{{LegalTagName}}\"\n    ],\n    \"otherRelevantDataCountries\": [\n      \"US\"\n    ],\n    \"status\": \"compliant\"\n  },\n  \"tags\": {\n    \"sgyTest\": \"Test 1\"\n  },\n  \"ancestry\": {\n    \"parents\": []\n  },\n  \"meta\": [],\n  \"data\": {\n        \"Name\": \"OSDU_SEGY\",\n        \"Description\": \"As originally delivered by ACME.com.\",\n        \"TotalSize\": \"26869760\",\n        \"SchemaFormatTypeID\": \"{{data-partition-id}}:reference-data--SchemaFormatType:SEGY:\",\n        \"Endian\": \"BIG\",\n        \"DatasetProperties\": {\n            \"FileSourceInfos\": [\n                {\n                    \"FileSource\": \"{{segy_sd_path}}\",\n                    \"PreloadFilePath\": \"\",\n                    \"Name\": \"OSDU_SEGY\",\n                    \"FileSize\": \"1050849760\"\n                }\n            ],\n            \"Checksum\": \"080c98a55b107f9ca5ef1d29f023fc2db99e0a08\"\n        },\n        \"VectorHeaderMapping\": [\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:Inline:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 4,\n                \"Position\": 189,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:Unitless:\",\n                \"ScalarIndicator\": \"NOSCALE\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:Crossline:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 4,\n                \"Position\": 193,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:Unitless:\",\n                \"ScalarIndicator\": \"NOSCALE\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:CMPX:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 4,\n                \"Position\": 181,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:m:\",\n                \"ScalarIndicator\": \"STANDARD\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:CMPY:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 4,\n                \"Position\": 185,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:m:\",\n                \"ScalarIndicator\": \"STANDARD\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:STARTTIME:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 2,\n                \"Position\": 109,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:ms:\",\n                \"ScalarIndicator\": \"STANDARD\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:ZSCALAR:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 2,\n                \"Position\": 69,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:Unitless:\",\n                \"ScalarIndicator\": \"NOSCALE\",\n                \"ScalarOverride\": 0\n            },\n            {\n                \"KeyName\": \"{{data-partition-id}}:reference-data--HeaderKeyName:XYSCALAR:\",\n                \"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:INT:\",\n                \"WordWidth\": 2,\n                \"Position\": 71,\n                \"UoM\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:Unitless:\",\n                \"ScalarIndicator\": \"NOSCALE\",\n                \"ScalarOverride\": 0\n            }\n        ],\n        \"SEGYRevision\": \"rev 0\",\n        \"ExtensionProperties\": {}\n    }\n}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records"
							],
							"query": [
								{
									"key": "skipdupes",
									"value": "true",
									"description": "Skip duplicates when updating records with the same value.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4 Work Product Components",
			"item": [
				{
					"name": "4.1 Create Seismic Bin Grid Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"seismic-bin-grid-id\", data.recordIds[0]);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = _.random(999111111111, 999999999999);\r",
									"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
									"var record = pm.environment.get(\"record_mid\");\r",
									"//postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
									"pm.environment.set(\"recordID\", dataPartition + \":\" + record + \":\" + rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\n\t\t\"kind\": \"{{authority}}:{{schemaSource}}:work-product-component--SeismicBinGrid:1.0.0\",\n        \"id\": \"{{data-partition-id}}:work-product-component--SeismicBinGrid:{{randomId}}\",\n\t\t\"acl\": {\n\t\t\t\"owners\": [\n\t\t\t\t\"data.default.owners@{{data-partition-id}}{{domain}}\"\n\t\t\t],\n\t\t\t\"viewers\": [\n\t\t\t\t\"data.default.viewers@{{data-partition-id}}{{domain}}\"\n\t\t\t]\n\t\t},\n\t\t\"legal\": {\n\t\t\t\"legaltags\": [\n\t\t\t\t\"{{LegalTagName}}\"\n\t\t\t],\n\t\t\t\"otherRelevantDataCountries\": [\n\t\t\t\t\"US\"\n\t\t\t],\n\t\t\t\"status\": \"compliant\"\n\t\t},\n\t\t\"tags\": {\n\t\t\t\"sgyTest\": \"Test 1\"\n\t\t},\n\t\t\"createTime\": \"2020-12-16T11:46:20.163Z\",\n\t\t\"createUser\": \"some-user@some-company-cloud.com\",\n\t\t\"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n\t\t\"modifyUser\": \"some-user@some-company-cloud.com\",\n\t\t\"ancestry\": {\n\t\t\t\"parents\": []\n\t\t},\n\t\t\"meta\": [],\n\t\t\"data\": {\n\t\t\t\"ResourceSecurityClassification\": \"{{data-partition-id}}:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n\t\t\t\"Name\": \"OSDU_BinGrid\",\n\t\t\t\"BinGridName\": \"OSDU_BinGrid\",\n\t\t\t\"Description\": \"OSDU type of bin grid for testing\",\n\t\t\t\"ancestry\": {\n\t\t\t\t\"parents\": []\n\t\t\t},\n\t\t\t\"P6TransformationMethod\": 1049,\n\t\t\t\"P6BinGridOriginI\": 9961.0,\n\t\t\t\"P6BinGridOriginJ\": 1961.0,\n\t\t\t\"P6BinGridOriginEasting\": 438302.76,\n\t\t\t\"P6BinGridOriginNorthing\": 6475310.75,\n\t\t\t\"P6ScaleFactorOfBinGrid\": 1.0,\n\t\t\t\"P6BinWidthOnIaxis\": 12.5,\n\t\t\t\"P6BinWidthOnJaxis\": 12.5,\n\t\t\t\"P6MapGridBearingOfBinGridJaxis\": -76.0,\n\t\t\t\"P6BinNodeIncrementOnIaxis\": 1.0,\n\t\t\t\"P6BinNodeIncrementOnJaxis\": 1.0,\n\t\t\t\"SpatialArea\": {\n\t\t\t\t\"QuantitativeAccuracyBandID\": \"{{data-partition-id}}:reference-data--QuantitativeAccuracyBand:Length.LessThan10m:\",\n\t\t\t\t\"QualitativeSpatialAccuracyTypeID\": null,\n\t\t\t\t\"CoordinateQualityCheckPerformedBy\": \"EDahl2\",\n\t\t\t\t\"CoordinateQualityCheckRemarks\": [],\n\t\t\t\t\"AsIngestedCoordinates\": {\n\t\t\t\t\t\"type\": \"AnyCrsFeatureCollection\",\n\t\t\t\t\t\"CoordinateReferenceSystemID\": \"{{data-partition-id}}:reference-data--CoordinateReferenceSystem:BoundCRS::odesprod::23031024:\",\n\t\t\t\t\t\"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"23031024\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"23031\\\"},\\\"name\\\":\\\"ED_1950_UTM_Zone_31N\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"ED_1950_UTM_Zone_31N\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Transverse_Mercator\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",500000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",3.0],PARAMETER[\\\\\\\"Scale_Factor\\\\\\\",0.9996],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",0.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",23031]]\\\"},\\\"name\\\":\\\"ED50 / UTM zone 31N * EPSG-Nor S62 2001 [23031,1613]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"1613\\\"},\\\"name\\\":\\\"ED_1950_To_WGS_1984_24\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"ED_1950_To_WGS_1984_24\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"Position_Vector\\\\\\\"],PARAMETER[\\\\\\\"X_Axis_Translation\\\\\\\",-90.365],PARAMETER[\\\\\\\"Y_Axis_Translation\\\\\\\",-101.13],PARAMETER[\\\\\\\"Z_Axis_Translation\\\\\\\",-123.384],PARAMETER[\\\\\\\"X_Axis_Rotation\\\\\\\",0.333],PARAMETER[\\\\\\\"Y_Axis_Rotation\\\\\\\",0.077],PARAMETER[\\\\\\\"Z_Axis_Rotation\\\\\\\",0.894],PARAMETER[\\\\\\\"Scale_Difference\\\\\\\",1.994],AUTHORITY[\\\\\\\"EPSG\\\\\\\",1613]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\"}\",\n\t\t\t\t\t\"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"AnyCrsFeature\",\n\t\t\t\t\t\t\t\"properties\": {},\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"type\": \"AnyCrsPolygon\",\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t429582.2271600945,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t430791.8366380928,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t439512.36947799837,\n\t\t\t\t\t\t\t\t\t\t\t6480162.22863138\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records"
							],
							"query": [
								{
									"key": "skipdupes",
									"value": "true",
									"description": "Skip duplicates when updating records with the same value.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Create Seismic Trace Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"seismic-trace-data-id\", data.recordIds[0]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = _.random(999111111111, 999999999999);\r",
									"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
									"var record = pm.environment.get(\"record_mid\");\r",
									"//postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
									"pm.environment.set(\"recordID\", dataPartition + \":\" + record + \":\" + rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"kind\": \"{{authority}}:{{schemaSource}}:work-product-component--SeismicTraceData:1.0.0\",\n        \"id\": \"{{data-partition-id}}:work-product-component--SeismicTraceData:{{randomId}}\",\n\t\t\"acl\": {\n\t\t\t\"owners\": [\n\t\t\t\t\"data.default.owners@{{data-partition-id}}{{domain}}\"\n\t\t\t],\n\t\t\t\"viewers\": [\n\t\t\t\t\"data.default.viewers@{{data-partition-id}}{{domain}}\"\n\t\t\t]\n\t\t},\n\t\t\"legal\": {\n\t\t\t\"legaltags\": [\n\t\t\t\t\"{{LegalTagName}}\"\n\t\t\t],\n\t\t\t\"otherRelevantDataCountries\": [\n\t\t\t\t\"US\"\n\t\t\t],\n\t\t\t\"status\": \"compliant\"\n\t\t},\n\t\t\"tags\": {\n\t\t\t\"sgyTest\": \"Test 1\"\n\t\t},\n\t\t\"ancestry\": {\n\t\t\t\"parents\": []\n\t\t},\n\t\t\"meta\": [\n\t\t\t{\n\t\t\t\t\"kind\": \"Unit\",\n\t\t\t\t\"name\": \"m\",\n\t\t\t\t\"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":1.0,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"L\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n\t\t\t\t\"unitOfMeasureID\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:m:\",\n\t\t\t\t\"propertyNames\": [\n\t\t\t\t\t\"VerticalDatumOffset\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kind\": \"Unit\",\n\t\t\t\t\"name\": \"m/s\",\n\t\t\t\t\"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":1.0,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"m/s\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"L/T\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n\t\t\t\t\"unitOfMeasureID\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:m%2Fs:\",\n\t\t\t\t\"propertyNames\": [\n\t\t\t\t\t\"ReplacementVelocity\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kind\": \"Unit\",\n\t\t\t\t\"name\": \"amplitude\",\n\t\t\t\t\"persistableReference\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"----\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Dimensionless\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n\t\t\t\t\"propertyNames\": [\n\t\t\t\t\t\"RangeAmplitudeMin\",\n\t\t\t\t\t\"RangeAmplitudeMax\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kind\": \"Unit\",\n\t\t\t\t\"name\": \"ms\",\n\t\t\t\t\"persistableReference\": \"{\\\"abcd\\\":{\\\"a\\\":0.0,\\\"b\\\":0.001,\\\"c\\\":1.0,\\\"d\\\":0.0},\\\"symbol\\\":\\\"ms\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"T\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"UAD\\\"}\",\n\t\t\t\t\"unitOfMeasureID\": \"{{data-partition-id}}:reference-data--UnitOfMeasure:ms:\",\n\t\t\t\t\"propertyNames\": [\n\t\t\t\t\t\"StartTime\",\n\t\t\t\t\t\"EndTime\",\n\t\t\t\t\t\"SampleInterval\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"kind\": \"DateTime\",\n\t\t\t\t\"name\": \"datetime\",\n\t\t\t\t\"persistableReference\": \"{\\\"format\\\":\\\"yyyy-MM-ddTHH:mm:ssZ\\\",\\\"timeZone\\\":\\\"UTC\\\",\\\"type\\\":\\\"DTM\\\"}\",\n\t\t\t\t\"propertyNames\": [\n\t\t\t\t\t\"CreationDateTime\",\n\t\t\t\t\t\"ExtensionProperties.dateModified\"\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t\"data\": {\n\t\t\t\"ResourceSecurityClassification\": \"{{data-partition-id}}:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n\t\t\t\"Name\": \"OSDU_SEGY\",\n\t\t\t\"Description\": \"Volve SegY data\",\n\t\t\t\"Datasets\": [\n\t\t\t\t\"{{data-partition-id}}:dataset--FileCollection.SEGY:{{randomId}}:\"\n\t\t\t],\n\t\t\t\"SpatialArea\": {\n\t\t\t\t\"AsIngestedCoordinates\": {\n\t\t\t\t\t\"type\": \"AnyCrsFeatureCollection\",\n\t\t\t\t\t\"CoordinateReferenceSystemID\": \"{{data-partition-id}}:reference-data--CoordinateReferenceSystem:BoundCRS::odesprod::23031024:\",\n\t\t\t\t\t\"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"23031024\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"23031\\\"},\\\"name\\\":\\\"ED_1950_UTM_Zone_31N\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"ED_1950_UTM_Zone_31N\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Transverse_Mercator\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",500000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",3.0],PARAMETER[\\\\\\\"Scale_Factor\\\\\\\",0.9996],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",0.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",23031]]\\\"},\\\"name\\\":\\\"ED50 / UTM zone 31N * EPSG-Nor S62 2001 [23031,1613]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"1613\\\"},\\\"name\\\":\\\"ED_1950_To_WGS_1984_24\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"ED_1950_To_WGS_1984_24\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"Position_Vector\\\\\\\"],PARAMETER[\\\\\\\"X_Axis_Translation\\\\\\\",-90.365],PARAMETER[\\\\\\\"Y_Axis_Translation\\\\\\\",-101.13],PARAMETER[\\\\\\\"Z_Axis_Translation\\\\\\\",-123.384],PARAMETER[\\\\\\\"X_Axis_Rotation\\\\\\\",0.333],PARAMETER[\\\\\\\"Y_Axis_Rotation\\\\\\\",0.077],PARAMETER[\\\\\\\"Z_Axis_Rotation\\\\\\\",0.894],PARAMETER[\\\\\\\"Scale_Difference\\\\\\\",1.994],AUTHORITY[\\\\\\\"EPSG\\\\\\\",1613]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\"}\",\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t429582.2271600945,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t430791.8366380928,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t439512.36947799837,\n\t\t\t\t\t\t\t\t\t\t\t6480162.22863138\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"AnyCrsPolygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"AnyCrsFeature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Wgs84Coordinates\": {\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.794071944,\n\t\t\t\t\t\t\t\t\t\t\t58.43241222\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.814781667,\n\t\t\t\t\t\t\t\t\t\t\t58.43260528\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.9633875,\n\t\t\t\t\t\t\t\t\t\t\t58.45794\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"Polygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"Feature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"type\": \"FeatureCollection\"\n\t\t\t\t},\n\t\t\t\t\"AppliedOperations\": [\n\t\t\t\t\t\"conversion from ED_1950_UTM_Zone_34N to GCS_European_1950; 5 points converted\",\n\t\t\t\t\t\"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_2; 5 points successfully transformed\"\n\t\t\t\t],\n\t\t\t\t\"SpatialParameterTypeID\": \"{{data-partition-id}}:reference-data--SpatialParameterType:Outline:\",\n\t\t\t\t\"SpatialGeometryTypeID\": \"{{data-partition-id}}:reference-data--SpatialGeometryType:Polygon:\"\n\t\t\t},\n\t\t\t\"Precision\": {\n\t\t\t\t\"WordFormat\": \"{{data-partition-id}}:reference-data--WordFormatType:IEEEFLOAT:\",\n\t\t\t\t\"WordWidth\": 4\n\t\t\t},\n\t\t\t\"CrosslineMin\": 1,\n\t\t\t\"CrosslineMax\": 34,\n\t\t\t\"CrosslineIncrement\": 1,\n\t\t\t\"InlineMin\": 1,\n\t\t\t\"InlineMax\": 67,\n\t\t\t\"InlineIncrement\": 1,\n\t\t\t\"SeismicDomainTypeID\": \"{{data-partition-id}}:reference-data--SeismicDomainType:Time:\",\n\t\t\t\"StartTime\": 0.0,\n\t\t\t\"EndTime\": 200.0,\n\t\t\t\"SampleInterval\": 4.0,\n\t\t\t\"SampleCount\": 51,\n\t\t\t\"RangeAmplitudeMin\": -67.563103,\n\t\t\t\"RangeAmplitudeMax\": 151.844238,\n\t\t\t\"SeismicWaveTypeID\": \"{{data-partition-id}}:reference-data--SeismicWaveType:P:\",\n\t\t\t\"SeismicStackingTypeID\": \"{{data-partition-id}}:reference-data--SeismicStackingType:Stk:\",\n\t\t\t\"TextualFileHeader\": [\n\t\t\t\t\"C01 CLIENT : STATOIL                              PROCESSED BY: WESTERNGECO     C02 AREA   : VOLVE, BLOCK 15/9,  NORTH SEA - ST10010     SURVEY: 3D 4C 0BC      C03 3D FULL AREA POST-STACK FINAL PSDM                       DATE: 2011-10-26   C04 DATA FORMAT: SEGY       DATA TYPE: STACK-FULL ANGLE, 3-41 DEGREES (T)       C05 ---------------------AQUISITION PARAMETRS---------------------------------- C06 DATA SHOT BY VESSEL: M/V SANCO SPIRIT & VIKLAND  CABLE LENGTH:6000 M        C07 NO OF GROUPS: 960/P,X,Y,Z.  NO OF CABLES: 8  ARRAY VOL/SOURCE: 3990 CU IN.  C08 GROUP INTERVAL: 25M  SHOT INTERVAL: 25M (FLIP-FLOP)  RECORD LENGTH: 10000 MSC09 GEODECTIC DATUM:  ED50      SPHEROID: INTERNAT 1924     PROJECTION: UTM     C10  UTM ZONE: 31 N                                                             C11 FIRST SAMPLE: 4 MS     LAST SAMPLE: 3400 MS     SAMPLE INTERVAL: 4 MS       C12 NAVIGATION SOURCE P1/90 UKOOA, SPS                                          C13 ----------------------PROCESSING SEQUENCE---------------------------------- C14 REFORMAT, RESAMPLING TO 4MS                                                 C15 Z TO P AMP. MATCHING AND DESIGNATURE APPLIED                                C16 TIDAL STATIC CORRECTION, NOISE ATTENUATION                                  C17 PZ CALIBRATION & SUMMATION                                                  C18 DIRECT ARRIVAL REMOVAL (SHOT & RECEIVER DOMAIN)                             C19 LINEAR NOISE ATTENUATION (RECEIVER DOMAIN), OFFSET REGULARIZATION           C20 SINGLE BOUNCE DECON IN TAU-PQ DOMAIN                                        C21 DETERMINISTIC WATER DEMULTIPLE, PrSDM (2011 VELOCITY MODEL),                C22 DEPTH TO TIME CONVERSION, RESIDUAL VELOCITY APPLIED, RADON DEMULTIPLE       C23  ANGLE MUTE (3-41 DEGREES), STACK,  MODEL BASED DEMULTIPLE                  C24 INVERSE_Q (100),  RANDOM NOISE ATTENUATION, 12.5X12.5 INTERPOLATION         C25 BPF 70Hz 50dB/OCT HIGH-CUT, OUTPUT SEGY FORMAT                              C26 ----------------------PROCESSING GRID INFORMATION-------------------------  C27 INLINE  BIN SIZE: 12.5M   CROSSLINE BIN SIZE: 12.5M  AZIMUTH: 284 DEGREES   C28 INLINE NUMBER INCREMENT:1       CROSSLINE  NUMBER INCREMENT:1               C29 PG1   X: 439272.97   Y: 6475068.89   IL:   9961   XL: 1881                  C30 PG2   X: 429582.21   Y: 6477485.37   IL:   9961   XL: 2680                  C31 PG3   X: 440588.57   Y: 6480344.84   IL: 10396   XL: 1881                   C32 PG4   X: 430897.81   Y: 6482761.32   IL: 10396   XL: 2680                   C33                                                                             C34 ----------------------HEADER WORD POSITIONS-------------------------------- C35 3D INLINE  BYTES 189-192             |  3D CROSS LINE   BYTES 193-196       C36 BIN CENTRE UTM-X  BYTES 181-184.  |  BIN CENTRE UTM-Y  BYTES 185-188        C37 CMP BYTES 21-24                                                             C38 ALL COORDINATE VALUES ARE MULTIPLIED BY 100                                 C39                                                                             C40 END EBCDIC                                                                  \"\n\t\t\t],\n\t\t\t\"VerticalDatumOffset\": 0.0,\n\t\t\t\"VerticalMeasurementTypeID\": \"{{data-partition-id}}:reference-data--VerticalMeasurementType:MSL:\",\n\t\t\t\"ReplacementVelocity\": 1480.0,\n\t\t\t\"ShiftApplied\": 0.0,\n\t\t\t\"Preferred3DInterpretationSetID\": \"{{data-partition-id}}:master-data--Seismic3DInterpretationSet:ST0202R08:\",\n\t\t\t\"BinGridID\": \"{{seismic-bin-grid-id}}:\",\n\t\t\t\"ExtensionProperties\": {}\n\t\t}\n\t}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records"
							],
							"query": [
								{
									"key": "skipdupes",
									"value": "true",
									"description": "Skip duplicates when updating records with the same value.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5 Work Product",
			"item": [
				{
					"name": "5 Create Seismic Work Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"work-product-id\", data.recordIds[0]);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand = _.random(999111111111, 999999999999);\r",
									"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
									"var record = pm.environment.get(\"record_mid\");\r",
									"//postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
									"pm.environment.set(\"recordID\", dataPartition + \":\" + record + \":\" + rand);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"kind\": \"{{authority}}:{{schemaSource}}:work-product--WorkProduct:1.0.0\",\n        \"id\": \"{{data-partition-id}}:work-product--WorkProduct:{{randomId}}\",\n\t\t\"acl\": {\n\t\t\t\"owners\": [\n\t\t\t\t\"data.default.owners@{{data-partition-id}}{{domain}}\"\n\t\t\t],\n\t\t\t\"viewers\": [\n\t\t\t\t\"data.default.viewers@{{data-partition-id}}{{domain}}\"\n\t\t\t]\n\t\t},\n\t\t\"legal\": {\n\t\t\t\"legaltags\": [\n\t\t\t\t\"{{LegalTagName}}\"\n\t\t\t],\n\t\t\t\"otherRelevantDataCountries\": [\n\t\t\t\t\"US\"\n\t\t\t],\n\t\t\t\"status\": \"compliant\"\n\t\t},\n\t\t\"tags\": {\n\t\t\t\"sgyTest\": \"Test 1\"\n\t\t},\n\t\t\"createTime\": \"2020-12-16T11:46:20.163Z\",\n\t\t\"createUser\": \"some-user@some-company-cloud.com\",\n\t\t\"modifyTime\": \"2020-12-16T11:52:24.477Z\",\n\t\t\"modifyUser\": \"some-user@some-company-cloud.com\",\n\t\t\"ancestry\": {\n\t\t\t\"parents\": []\n\t\t},\n\t\t\"meta\": [],\n\t\t\"data\": {\n\t\t\t\"ResourceSecurityClassification\": \"{{data-partition-id}}:reference-data--ResourceSecurityClassification:RESTRICTED:\",\n\t\t\t\"Name\": \"Seismic migration Time  - work product\",\n\t\t\t\"Description\": \"Seismic migration Time - work product\",\n\t\t\t\"SpatialPoint\": {\n\t\t\t\t\"QuantitativeAccuracyBandID\": \"{{data-partition-id}}:reference-data--QuantitativeAccuracyBand:Length.LessThan10m:\",\n\t\t\t\t\"QualitativeSpatialAccuracyTypeID\": \"{{data-partition-id}}:reference-data--QualitativeSpatialAccuracyType:Confirmed:\",\n\t\t\t\t\"CoordinateQualityCheckPerformedBy\": \"Example CoordinateQualityCheckPerformedBy\",\n\t\t\t\t\"CoordinateQualityCheckRemarks\": [\n\t\t\t\t\t\"Example CoordinateQualityCheckRemarks\"\n\t\t\t\t],\n\t\t\t\t\"AsIngestedCoordinates\": {\n\t\t\t\t\t\"type\": \"AnyCrsFeatureCollection\",\n\t\t\t\t\t\"CoordinateReferenceSystemID\": \"{{data-partition-id}}:reference-data--CoordinateReferenceSystem:BoundCRS::odesprod::23031024:\",\n\t\t\t\t\t\"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"23031024\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"23031\\\"},\\\"name\\\":\\\"ED_1950_UTM_Zone_31N\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"ED_1950_UTM_Zone_31N\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Transverse_Mercator\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",500000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",3.0],PARAMETER[\\\\\\\"Scale_Factor\\\\\\\",0.9996],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",0.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",23031]]\\\"},\\\"name\\\":\\\"ED50 / UTM zone 31N * EPSG-Nor S62 2001 [23031,1613]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"1613\\\"},\\\"name\\\":\\\"ED_1950_To_WGS_1984_24\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"ED_1950_To_WGS_1984_24\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"Position_Vector\\\\\\\"],PARAMETER[\\\\\\\"X_Axis_Translation\\\\\\\",-90.365],PARAMETER[\\\\\\\"Y_Axis_Translation\\\\\\\",-101.13],PARAMETER[\\\\\\\"Z_Axis_Translation\\\\\\\",-123.384],PARAMETER[\\\\\\\"X_Axis_Rotation\\\\\\\",0.333],PARAMETER[\\\\\\\"Y_Axis_Rotation\\\\\\\",0.077],PARAMETER[\\\\\\\"Z_Axis_Rotation\\\\\\\",0.894],PARAMETER[\\\\\\\"Scale_Difference\\\\\\\",1.994],AUTHORITY[\\\\\\\"EPSG\\\\\\\",1613]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\"}\",\n\t\t\t\t\t\"persistableReferenceUnitZ\": \"{\\\"scaleOffset\\\":{\\\"scale\\\":1.0,\\\"offset\\\":0.0},\\\"symbol\\\":\\\"m\\\",\\\"baseMeasurement\\\":{\\\"ancestry\\\":\\\"Length\\\",\\\"type\\\":\\\"UM\\\"},\\\"type\\\":\\\"USO\\\"}\",\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t429582.2271600945,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t430791.8366380928,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t439512.36947799837,\n\t\t\t\t\t\t\t\t\t\t\t6480162.22863138\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"AnyCrsPolygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"AnyCrsFeature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Wgs84Coordinates\": {\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.794071944,\n\t\t\t\t\t\t\t\t\t\t\t58.43241222\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.814781667,\n\t\t\t\t\t\t\t\t\t\t\t58.43260528\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.9633875,\n\t\t\t\t\t\t\t\t\t\t\t58.45794\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"Polygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"Feature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"type\": \"FeatureCollection\"\n\t\t\t\t},\n\t\t\t\t\"AppliedOperations\": [\n\t\t\t\t\t\"conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted\",\n\t\t\t\t\t\"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed\"\n\t\t\t\t],\n\t\t\t\t\"SpatialParameterTypeID\": \"{{data-partition-id}}:reference-data--SpatialParameterType:Outline:\",\n\t\t\t\t\"SpatialGeometryTypeID\": \"{{data-partition-id}}:reference-data--SpatialGeometryType:Point:\"\n\t\t\t},\n\t\t\t\"SpatialArea\": {\n\t\t\t\t\"AsIngestedCoordinates\": {\n\t\t\t\t\t\"type\": \"AnyCrsFeatureCollection\",\n\t\t\t\t\t\"CoordinateReferenceSystemID\": \"{{data-partition-id}}:reference-data--CoordinateReferenceSystem:BoundCRS::odesprod::23031024:\",\n\t\t\t\t\t\"persistableReferenceCrs\": \"{\\\"authCode\\\":{\\\"auth\\\":\\\"OSDU\\\",\\\"code\\\":\\\"23031024\\\"},\\\"lateBoundCRS\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"23031\\\"},\\\"name\\\":\\\"ED_1950_UTM_Zone_31N\\\",\\\"type\\\":\\\"LBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"PROJCS[\\\\\\\"ED_1950_UTM_Zone_31N\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Transverse_Mercator\\\\\\\"],PARAMETER[\\\\\\\"False_Easting\\\\\\\",500000.0],PARAMETER[\\\\\\\"False_Northing\\\\\\\",0.0],PARAMETER[\\\\\\\"Central_Meridian\\\\\\\",3.0],PARAMETER[\\\\\\\"Scale_Factor\\\\\\\",0.9996],PARAMETER[\\\\\\\"Latitude_Of_Origin\\\\\\\",0.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0],AUTHORITY[\\\\\\\"EPSG\\\\\\\",23031]]\\\"},\\\"name\\\":\\\"ED50 / UTM zone 31N * EPSG-Nor S62 2001 [23031,1613]\\\",\\\"singleCT\\\":{\\\"authCode\\\":{\\\"auth\\\":\\\"EPSG\\\",\\\"code\\\":\\\"1613\\\"},\\\"name\\\":\\\"ED_1950_To_WGS_1984_24\\\",\\\"type\\\":\\\"ST\\\",\\\"ver\\\":\\\"PE_10_3_1\\\",\\\"wkt\\\":\\\"GEOGTRAN[\\\\\\\"ED_1950_To_WGS_1984_24\\\\\\\",GEOGCS[\\\\\\\"GCS_European_1950\\\\\\\",DATUM[\\\\\\\"D_European_1950\\\\\\\",SPHEROID[\\\\\\\"International_1924\\\\\\\",6378388.0,297.0]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],GEOGCS[\\\\\\\"GCS_WGS_1984\\\\\\\",DATUM[\\\\\\\"D_WGS_1984\\\\\\\",SPHEROID[\\\\\\\"WGS_1984\\\\\\\",6378137.0,298.257223563]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],METHOD[\\\\\\\"Position_Vector\\\\\\\"],PARAMETER[\\\\\\\"X_Axis_Translation\\\\\\\",-90.365],PARAMETER[\\\\\\\"Y_Axis_Translation\\\\\\\",-101.13],PARAMETER[\\\\\\\"Z_Axis_Translation\\\\\\\",-123.384],PARAMETER[\\\\\\\"X_Axis_Rotation\\\\\\\",0.333],PARAMETER[\\\\\\\"Y_Axis_Rotation\\\\\\\",0.077],PARAMETER[\\\\\\\"Z_Axis_Rotation\\\\\\\",0.894],PARAMETER[\\\\\\\"Scale_Difference\\\\\\\",1.994],AUTHORITY[\\\\\\\"EPSG\\\\\\\",1613]]\\\"},\\\"type\\\":\\\"EBC\\\",\\\"ver\\\":\\\"PE_10_3_1\\\"}\",\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t429582.2271600945,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t430791.8366380928,\n\t\t\t\t\t\t\t\t\t\t\t6477485.023036702\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t439512.36947799837,\n\t\t\t\t\t\t\t\t\t\t\t6480162.22863138\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t438302.76,\n\t\t\t\t\t\t\t\t\t\t\t6475310.75\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"AnyCrsPolygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"AnyCrsFeature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Wgs84Coordinates\": {\n\t\t\t\t\t\"features\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\t\t\"coordinates\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.794071944,\n\t\t\t\t\t\t\t\t\t\t\t58.43241222\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.814781667,\n\t\t\t\t\t\t\t\t\t\t\t58.43260528\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.9633875,\n\t\t\t\t\t\t\t\t\t\t\t58.45794\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t1.943967222,\n\t\t\t\t\t\t\t\t\t\t\t58.414205\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"type\": \"Polygon\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\"ijNumbers\": [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t10361,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t2680\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t9961,\n\t\t\t\t\t\t\t\t\t\t1961\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": \"Feature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"type\": \"FeatureCollection\"\n\t\t\t\t},\n\t\t\t\t\"AppliedOperations\": [\n\t\t\t\t\t\"conversion from ED_1950_UTM_Zone_34N to GCS_European_1950; 5 points converted\",\n\t\t\t\t\t\"transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_2; 5 points successfully transformed\"\n\t\t\t\t],\n\t\t\t\t\"SpatialParameterTypeID\": \"{{data-partition-id}}:reference-data--SpatialParameterType:Outline:\",\n\t\t\t\t\"SpatialGeometryTypeID\": \"{{data-partition-id}}:reference-data--SpatialGeometryType:Polygon:\"\n\t\t\t},\n\t\t\t\"SubmitterName\": \"Example SubmitterName\",\n\t\t\t\"BusinessActivities\": [\n\t\t\t\t\"Example BusinessActivities\"\n\t\t\t],\n\t\t\t\"AuthorIDs\": [\n\t\t\t\t\"Example AuthorIDs\"\n\t\t\t],\n\t\t\t\"Annotations\": [\n\t\t\t\t\"Example Annotations\"\n\t\t\t],\n\t\t\t\"ExtensionProperties\": {},\n\t\t\t\"Components\": [\n\t\t\t\t\"{{seismic-trace-data-id}}:\",\n\t\t\t\t\"{{seismic-bin-grid-id}}:\"\n\t\t\t]\n\t\t}\n\t}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records"
							],
							"query": [
								{
									"key": "skipdupes",
									"value": "true",
									"description": "Skip duplicates when updating records with the same value.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6 DAG Process",
			"item": [
				{
					"name": "6.1 Register Workflow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var dagName = pm.environment.get(\"segy_to_zgy_DAG_name\"); \r",
									"pm.collectionVariables.set(\"segyToZgyWorkflowName\", dagName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response",
									"pm.test(\"Status code is 200 or 201 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201 , 409]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"This is segy-to-zgy conversion DAG\",\r\n    \"registrationInstructions\": {\r\n        \"dagName\": \"{{segy_to_zgy_DAG_name}}\"\r\n    },\r\n    \"workflowName\": \"{{segyToZgyWorkflowName}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{WORKFLOW_URL}}/workflow",
							"protocol": "https",
							"host": [
								"{{WORKFLOW_URL}}"
							],
							"path": [
								"workflow"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 Trigger Workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status description - OK.\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"runId is returned\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.runId).to.exist\r",
									"});\r",
									"pm.test(\"runId is a valid string\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.runId).to.be.a('string')\r",
									"});\r",
									"pm.test(\"status is submitted\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.status).to.eql(\"submitted\");\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.environment.set(\"startTimeStamp\", responseJson.startTimeStamp);\r",
									"\r",
									"if (responseJson != null) {\r",
									"    console.log(\"RunID: \", responseJson.runId)\r",
									"    pm.environment.set(\"runId\", responseJson.runId);\r",
									"}\r",
									"else {\r",
									"    pm.environment.set(\"runId\", null);\r",
									"}\r",
									"console.log(\"runId:\" + pm.environment.get(\"runId\"))\r",
									"pm.collectionVariables.set(\"tries\", 0);\r",
									"pm.response.to.have.status(200);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"executionContext\": {\r\n        \"authorization\": \"{{id_token}}\",\r\n        \"sd_svc_token\": \"{{id_token}}\",\r\n        \"sd_svc_api_key\": \"test\",\r\n        \"storage_svc_api_key\": \"test\",\r\n        \"filecollection_segy_id\": \"{{file-collection-id}}:\",\r\n        \"work_product_id\": \"{{work-product-id}}:\",\r\n        \"data_partition_id\": \"{{data-partition-id}}\",\r\n        \"data-partition-id\": \"{{data-partition-id}}\",\r\n        \"id_token\": \"{{id_token}}\",\r\n\t\t\"access_token\": \"{{access_token}}\"\r\n    }\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{WORKFLOW_URL}}/workflow/{{segyToZgyWorkflowName}}/workflowRun",
							"protocol": "https",
							"host": [
								"{{WORKFLOW_URL}}"
							],
							"path": [
								"workflow",
								"{{segyToZgyWorkflowName}}",
								"workflowRun"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 Check the triggered workflow status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK.\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"maxNumberOfTries = pm.environment.get(\"NumOfIterForDagStatus\"); // max number of tries",
									"sleepBetweenTries = pm.environment.get(\"sleepIntervalBetweenAttempts\"); // your interval between attempts",
									"try{",
									"    console.log(\"num of tries: \", pm.collectionVariables.get(\"tries\"))",
									"    const jsonData = pm.response.json();",
									"    if ( (jsonData.status == \"finished\") || (jsonData.status == \"success\") || (jsonData.status == \"failed\") || (jsonData.status == \"tries\")  || (pm.collectionVariables.get(\"tries\") > maxNumberOfTries) || pm.environment.get(\"runId\") == null) {",
									"        pm.collectionVariables.unset(\"tries\");",
									"        console.log(\"Completed running with status: \", jsonData.status);",
									"        pm.collectionVariables.set(\"ingestStatus\", jsonData.status);",
									"        postman.setNextRequest();",
									"    } else {",
									"        if ( (jsonData.status == \"running\") || (jsonData.status == \"submitted\") || (jsonData.status == \"queued\") ) {",
									"            console.log(\"Status: \", jsonData.status);",
									"            var tries = parseInt(pm.collectionVariables.get(\"tries\"), 10);",
									"            pm.collectionVariables.set(\"tries\", tries + 1);",
									"            console.log(\"num of tries: \", pm.collectionVariables.get(\"tries\"));",
									"        }",
									"        setTimeout(function() {}, sleepBetweenTries);",
									"        console.log(tries);",
									"        postman.setNextRequest(request.name);",
									"   }",
									"}catch (e) {",
									"    console.log(e.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{WORKFLOW_URL}}/workflow/{{segyToZgyWorkflowName}}/workflowRun/{{runId}}",
							"protocol": "https",
							"host": [
								"{{WORKFLOW_URL}}"
							],
							"path": [
								"workflow",
								"{{segyToZgyWorkflowName}}",
								"workflowRun",
								"{{runId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7 Validate Ingestion",
			"item": [
				{
					"name": "7.1 Storage - Get file collection record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"try {",
									"    let resBody = pm.response.json()",
									"    let recordIdReturned = resBody.id",
									"    console.log(recordIdReturned);",
									"    //pm.environment.set(\"recordVersion\", recordVersionReturned);",
									"    tests[\"Record retrived: \" + recordIdReturned] = recordIdReturned.length > 0;",
									"}",
									"catch (e) {",
									"    console.log(e.message);",
									"    tests[\"Couldn't retrive record: \"] = e.length > 0;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records/{{file-collection-id}}",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records",
								"{{file-collection-id}}"
							],
							"query": [
								{
									"key": "attribute",
									"value": "",
									"description": "Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7.2 Storage - Get Seismic bin grid record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"try {",
									"let resBody = pm.response.json()",
									"let recordIdReturned = resBody.id",
									"console.log(recordIdReturned);",
									"//pm.environment.set(\"recordVersion\", recordVersionReturned);",
									"tests[\"Record retrived: \" + recordIdReturned] = recordIdReturned.length > 0;",
									"}",
									"catch (e) {",
									"    console.log(e.message);",
									"    tests[\"Couldn't retrive record: \"] = e.length > 0;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records/{{seismic-bin-grid-id}}",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records",
								"{{seismic-bin-grid-id}}"
							],
							"query": [
								{
									"key": "attribute",
									"value": "",
									"description": "Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7.3 Storage - Get Seismic trace data  record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"try {",
									"    let resBody = pm.response.json()",
									"    let recordIdReturned = resBody.id",
									"    let zgy_record = resBody.data.Artefacts[0].ResourceID;",
									"    pm.environment.set(\"open-zgy-slb\", zgy_record);",
									"    tests[\"Record retrived: \" + recordIdReturned] = recordIdReturned.length > 0;",
									"}",
									"catch (e) {",
									"    console.log(e.message);",
									"    tests[\"Couldn't retrive record: \"] = e.length > 0;",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records/{{seismic-trace-data-id}}",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records",
								"{{seismic-trace-data-id}}"
							],
							"query": [
								{
									"key": "attribute",
									"value": "",
									"description": "Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7.4 Storage - Get OpenZGY SLB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status description - OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"try {",
									"    let resBody = pm.response.json()",
									"    let fileSource = resBody.data.DatasetProperties.FileSourceInfos[0].FileSource;",
									"    pm.collectionVariables.set(\"fileSource\", fileSource);",
									"    console.log(fileSource);",
									"    let splitSDPath = fileSource.replace(\"sd://\", \"\").split(\"/\");",
									"",
									"    let splitSDPathLen = splitSDPath.length;",
									"",
									"    let sdTenant = splitSDPath[0];",
									"    let sdSubproject = splitSDPath[1];",
									"    let zgyDataset = splitSDPath[splitSDPathLen - 1];",
									"    let sdPath = \"\";",
									"",
									"    if (splitSDPathLen > 3) {",
									"        sdPath = splitSDPath.slice(2, splitSDPathLen - 1);",
									"    }",
									"",
									"    pm.collectionVariables.set(\"sd-tenant\", sdTenant);",
									"    pm.collectionVariables.set(\"sd-subproject\", sdSubproject);",
									"    pm.collectionVariables.set(\"zgy-dataset\", zgyDataset);",
									"    pm.collectionVariables.set(\"sd-path\", sdPath);",
									"    console.log(\"sdTenant: \" + sdTenant);",
									"    console.log(\"sdSubproject: \" + sdSubproject);",
									"    console.log(\"zgyDataset: \" + zgyDataset);",
									"    console.log(\"sdPath: \" + sdPath);",
									"    ",
									"}",
									"catch (e) {",
									"    console.log(e.message);",
									"    tests[\"Couldn't retrive record: \"] = e.length > 0;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"url": {
							"raw": "https://{{STORAGE_HOST}}/records/{{open-zgy-slb}}",
							"protocol": "https",
							"host": [
								"{{STORAGE_HOST}}"
							],
							"path": [
								"records",
								"{{open-zgy-slb}}"
							],
							"query": [
								{
									"key": "attribute",
									"value": "",
									"description": "Filter attributes to restrict the returned fields of the record. Usage: data.{record-data-field-name}.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "8 Get ZGY info",
			"item": [
				{
					"name": "8.1 Get ZGY Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status description - OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{use_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{SEISMICDMS_HOST}}/dataset/tenant/{{sd-tenant}}/subproject/{{sd-subproject}}/dataset/{{zgy-dataset}}?path={{sd-path}}",
							"protocol": "https",
							"host": [
								"{{SEISMICDMS_HOST}}"
							],
							"path": [
								"dataset",
								"tenant",
								"{{sd-tenant}}",
								"subproject",
								"{{sd-subproject}}",
								"dataset",
								"{{zgy-dataset}}"
							],
							"query": [
								{
									"key": "path",
									"value": "{{sd-path}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "9 Clean-up",
			"item": [
				{
					"name": "9.2  Delete a Legal tag created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the API was able to send a successful response",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "This value should be the desired data partition id.",
								"key": "data-partition-id",
								"type": "text",
								"value": "{{data-partition-id}}"
							}
						],
						"url": {
							"raw": "https://{{LEGAL_HOST}}/legaltags/:name",
							"protocol": "https",
							"host": [
								"{{LEGAL_HOST}}"
							],
							"path": [
								"legaltags",
								":name"
							],
							"variable": [
								{
									"key": "name",
									"value": "{{LegalTagName}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ingestStatus",
			"value": ""
		},
		{
			"key": "runId",
			"value": ""
		},
		{
			"key": "fileSource",
			"value": ""
		},
		{
			"key": "sd-tenant",
			"value": ""
		},
		{
			"key": "sd-path",
			"value": ""
		},
		{
			"key": "sd-subproject",
			"value": ""
		},
		{
			"key": "zgy-dataset",
			"value": ""
		},
		{
			"key": "segyToZgyWorkflowName",
			"value": ""
		},
		{
			"key": "use_token",
			"value": ""
		}
	]
}